@page "/create-job"
@page "/job/edit/{Id:int}"
@using PrintingJob.Models
@using PrintingJob.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>
    <i class="align-middle me-2" data-feather="@(Id == 0 ? "file-plus" : "edit")"></i>
    @(Id == 0 ? "Create New Job" : "Edit Job")
</h3>
<hr />

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-danger">@mensaje</div>
}

@if (job == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="job">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (Id > 0)
        {
            <div class="mb-3" style="display:none">
                <label class="form-label">Job ID</label>
                <InputNumber class="form-control" @bind-Value="job.Id" disabled />
            </div>
        }

        <div class="row">
            <div class="col-md-3">
                <label class="form-label">Client Name</label>
                <InputText class="form-control" @bind-Value="job.ClientName" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Job Name</label>
                <InputText class="form-control" @bind-Value="job.JobName" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Quantity</label>
                <InputNumber class="form-control" @bind-Value="job.Quantity" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Carrier</label>
                <InputSelect class="form-select" @bind-Value="job.Carrier">
                    <option value="">-- Select Carrier --</option>
                    <option value="USPS">USPS</option>
                    <option value="UPS">UPS</option>
                    <option value="FedEx">FedEx</option>
                </InputSelect>
            </div>

            <div class="col-md-3">
                <label class="form-label">SLA Mail By</label>
                <InputDate class="form-control" @bind-Value="job.SLA_MailBy" />
            </div>
        </div>

        <br />

        <div class="d-flex gap-2">
            <button type="button" class="btn @(Id == 0 ? "btn-success" : "btn-warning")" @onclick="Save">
                <i class="align-middle me-2" data-feather="@(Id == 0 ? "plus" : "save")"></i>
                @(Id == 0 ? "Register Job" : "Update Job")
            </button>
            <a class="btn btn-secondary" href="/JobList">
                <i class="align-middle me-2" data-feather="x"></i>
                Cancel
            </a>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Job? job;
    private string mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        using var ctx = DbFactory.CreateDbContext();

        if (Id == 0)
        {
            job = new Job();
            job.SLA_MailBy = DateTime.Today;
        }
        else
        {
            job = await ctx.Jobs.FirstOrDefaultAsync(j => j.Id == Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("feather.replace");
    }

    private async Task Save()
    {
        mensaje = "";

        if (job == null)
        {
            mensaje = "Error loading job";
            return;
        }

        if (string.IsNullOrWhiteSpace(job.ClientName))
        {
            mensaje = "Client Name is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(job.JobName))
        {
            mensaje = "Job Name is required";
            return;
        }

        if (job.Quantity <= 0)
        {
            mensaje = "Quantity must be greater than 0";
            return;
        }

        if (string.IsNullOrWhiteSpace(job.Carrier))
        {
            mensaje = "Carrier is required";
            return;
        }

        if (job.SLA_MailBy == default)
        {
            mensaje = "SLA Mail By date is required";
            return;
        }

        try
        {
            using var ctx = DbFactory.CreateDbContext();

            if (Id == 0)
            {
                job.CreatedAt = DateTime.Now;
                job.CurrentStatus = "Received";

                ctx.Jobs.Add(job);
                await ctx.SaveChangesAsync();

                var history = new JobStatusHistory
                {
                    JobId = job.Id,
                    Status = "Received",
                    Note = "Job registered",
                    ChangedAt = DateTime.Now
                };

                ctx.JobStatusHistories.Add(history);
                await ctx.SaveChangesAsync();
            }
            else
            {
                ctx.Jobs.Update(job);
                await ctx.SaveChangesAsync();
            }

            Navigation.NavigateTo("/JobList");
        }
        catch (Exception ex)
        {
            mensaje = $"Error: {ex.Message}";
        }
    }
}