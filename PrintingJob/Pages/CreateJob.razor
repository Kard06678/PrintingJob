@page "/create-job"
@using PrintingJob.Models
@using PrintingJob.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation

<h3>Register New Job</h3>

<EditForm Model="newJob" OnValidSubmit="HandleCreateJob">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="clientName" class="form-label">Client Name</label>
        <InputText id="clientName" class="form-control" @bind-Value="newJob.ClientName" />
    </div>

    <div class="mb-3">
        <label for="jobName" class="form-label">Job Name</label>
        <InputText id="jobName" class="form-control" @bind-Value="newJob.JobName" />
    </div>

    <div class="mb-3">
        <label for="quantity" class="form-label">Quantity</label>
        <InputNumber id="quantity" class="form-control" @bind-Value="newJob.Quantity" />
    </div>

    <div class="mb-3">
        <label for="carrier" class="form-label">Carrier</label>
        <InputSelect id="carrier" class="form-select" @bind-Value="newJob.Carrier">
            <option value="USPS">USPS</option>
            <option value="UPS">UPS</option>
            <option value="FedEx">FedEx</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="slaMailBy" class="form-label">SLA Mail By</label>
        <InputDate id="slaMailBy" class="form-control" @bind-Value="newJob.SLA_MailBy" />
    </div>

    <button class="btn btn-success" type="submit">Register Job</button>
    <a class="btn btn-secondary" href="/JobList">Cancel</a>
</EditForm>

@code {
    private Job newJob = new Job();

    private async Task HandleCreateJob()
    {
        // Asignar valores adicionales
        try
        {
            newJob.CreatedAt = DateTime.Now;
            newJob.CurrentStatus = "Received";

            // Guardar en la base de datos
            using var ctx = DbFactory.CreateDbContext();
            ctx.Jobs.Add(newJob);
            await ctx.SaveChangesAsync(); // Guardar el trabajo primero para generar el ID

            // Crear el historial inicial
            var history = new JobStatusHistory
            {
                JobId = newJob.Id, // Ahora el ID del trabajo está disponible
                Status = "Received",
                Note = "Job registered",
                ChangedAt = DateTime.Now
            };
            ctx.JobStatusHistories.Add(history);

            await ctx.SaveChangesAsync(); // Guardar el historial
            Navigation.NavigateTo("/JobList");
        }
        catch(Exception Ex)
        {
            string error = Ex.Message;
        }
        // Redirigir al listado
    }
}